import tkinter as tk
from tkinter import ttk, filedialog, scrolledtext,messagebox
from TextToJson import *
import os
from Learning_memory import *
from Chatting import main
#from Learning_memory import *
class WeChatToolkit:
    def __init__(self, root):
        self.root = root
        self.root.title("微信聊天记录处理工具")
        self.root.geometry("800x600")
        
        # 创建主框架
        main_frame = ttk.Frame(root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # 创建左侧控制面板
        control_frame = ttk.LabelFrame(main_frame, text="操作面板")
        control_frame.pack(side=tk.LEFT, fill=tk.Y, padx=(0, 10))
        
        # 创建右侧显示面板
        display_frame = ttk.Frame(main_frame)
        display_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        
        # 构建控制面板内容
        self.setup_control_panel(control_frame)
        
        # 构建显示面板内容
        self.setup_display_panel(display_frame)
        self.chat_flie_path=""
        self.chat_data=None
        self.json_output=""
        self.status_var = tk.StringVar(value="就绪")
        status_bar = ttk.Frame(root, relief=tk.SUNKEN, padding=(10, 5))
        status_bar.pack(side=tk.BOTTOM, fill=tk.X)
        ttk.Label(status_bar, textvariable=self.status_var).pack(side=tk.LEFT)
    
    def setup_control_panel(self, parent):
        # 文件操作区域
        file_frame = ttk.LabelFrame(parent, text="文件操作")
        file_frame.pack(fill=tk.X, padx=5, pady=5)
        self.file_label = ttk.Label(file_frame, text="未选择文件", wraplength=200)
        self.file_label.pack(fill=tk.X, pady=5)
        ttk.Button(file_frame, text="导入聊天记录", 
                  command=self.import_chat_history).pack(fill=tk.X, pady=2)
        ttk.Button(file_frame, text="导入图片", 
                  command=self.import_pic).pack(fill=tk.X, pady=2)
        ttk.Button(file_frame, text="导入语音", 
                  command=self.import_audio).pack(fill=tk.X, pady=2)
        
        # 解析设置区域
        parse_frame = ttk.LabelFrame(parent, text="解析设置")
        parse_frame.pack(fill=tk.X, padx=5, pady=5)
        
        ttk.Label(parse_frame, text="最近消息数量:").pack(anchor=tk.W)
        msg_count = ttk.Combobox(parse_frame, values=[5, 10, 20, 50, 100])
        msg_count.set(10)
        msg_count.pack(fill=tk.X, pady=2)
        
        ttk.Label(parse_frame, text="会话ID:").pack(anchor=tk.W)
        ttk.Entry(parse_frame).pack(fill=tk.X, pady=2)
        
        ttk.Button(parse_frame, text="解析聊天记录", 
                  command=self.parse_chat).pack(fill=tk.X, pady=5)
        
        # API设置区域
        api_frame = ttk.LabelFrame(parent, text="API设置")
        api_frame.pack(fill=tk.X, padx=5, pady=5)
        
        #ttk.Label(api_frame, text="API密钥:").pack(anchor=tk.W)
        #self.api_key_entry=ttk.Entry(api_frame).pack(fill=tk.X, pady=2)
        
        ttk.Button(api_frame, text="测试连接", 
                  command=self.test_api).pack(fill=tk.X, pady=2)
        ttk.Button(api_frame, text="自动回复", 
                  command=self.auto_reply).pack(fill=tk.X, pady=2)
        
        # 退出按钮
        
        ttk.Button(parent, text="新的对话", 
                  command=self.root.quit).pack(side=tk.BOTTOM, fill=tk.X, pady=10)
        ttk.Button(parent, text="工具箱", 
                  command=self.root.quit).pack(side=tk.BOTTOM, fill=tk.X, pady=10)
    
    def setup_display_panel(self, parent):
        # 使用Notebook创建多个标签页
        self.notebook = ttk.Notebook(parent)
        self.notebook.pack(fill=tk.BOTH, expand=True)
        
        # 聊天记录预览标签页
        preview_frame = ttk.Frame(self.notebook)
        self.notebook.add(preview_frame, text="聊天记录预览")
        
        self.preview_text = scrolledtext.ScrolledText(preview_frame, wrap=tk.WORD)
        self.preview_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        #self.preview_text.insert(tk.END, "聊天记录内容将显示在这里...")
        
        # JSON预览标签页
        json_frame = ttk.Frame(self.notebook)
        self.notebook.add(json_frame, text="输入信息")
        
        self.input_text = scrolledtext.ScrolledText(json_frame, wrap=tk.WORD)
        self.input_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        #self.json_text.insert(tk.END, "转换后的JSON内容将显示在这里...")
        
        # API回复标签页
        api_frame = ttk.Frame(self.notebook)
        self.notebook.add(api_frame, text="API响应")
        
        self.api_text = scrolledtext.ScrolledText(api_frame, wrap=tk.WORD)
        self.api_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        #self.api_text.insert(tk.END, "API返回的回复将显示在这里...")
    
    # 占位功能方法
    def import_chat_history(self):
        file_path = filedialog.askopenfilename(
            title="选择聊天记录文件",
            filetypes=[("文本文件", "*.txt"), ("所有文件", "*.*")]
        )
        if file_path:
            self.chat_file_path = file_path
            self.file_label.config(text=os.path.basename(file_path))
            self.status_var.set(f"已选择文件: {os.path.basename(file_path)}")
            
            # 尝试预览文件内容
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read(5000)  # 只读取前5000个字符用于预览
                
                self.preview_text.config(state=tk.NORMAL)
                self.preview_text.delete(1.0, tk.END)
                self.preview_text.insert(tk.END, content)
                self.preview_text.config(state=tk.DISABLED)
                #convert_wechat_to_json(file_path,"test.json")
            except Exception as e:
                messagebox.showerror("读取错误", f"无法读取文件: {str(e)}")
                self.status_var.set("文件读取失败")
    def import_pic(self):
        #filedialog.asksaveasfilename(title="保存JSON文件")
        print("导入图片功能被调用")
    
    def import_audio(self):
        print("导入语音功能被调用")
    
    def parse_chat(self):
        #print("解析聊天记录功能被调用")
        try:
            convert_wechat_to_json(self.chat_file_path,"memory.json")
            main_memory()
            messagebox.showinfo(title="完成", message="已成功解析为JSON文件")
            
        except:
            messagebox.showerror(title="错误", message="请正确导入文件")
    
    def test_api(self):
        print("测试API连接功能被调用")
    
    def auto_reply(self):
        input=self.input_text.get(1.0,tk.END)
        self.input_text.delete(1.0,tk.END)
        
        output=main(input)
        output=str(output)
        self.api_text.insert(tk.END,output)
        print("自动回复功能被调用")

# 创建主窗口并运行程序
if __name__ == "__main__":
    root = tk.Tk()
    app = WeChatToolkit(root)
    root.mainloop()
